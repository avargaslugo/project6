
    // 2nd Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {

        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Harvested by calling function produceDrug()
        let tx2 = await supplyChain.shipItem(upc,{from: distributorAddress})

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        truffleAssert.eventEmitted(tx2, 'Shipped');
        assert.equal(resultBufferTwo[5].toString(), 2, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], distributorAddress, 'Error: incorrect ownership transfer')
              
    })

    // 2nd Test
    it("Testing smart contract function receiveItem() that allows a retailer to recive a drug", async() => {

        const supplyChain = await SupplyChain.deployed()
        // Mark an item as Harvested by calling function produceDrug()
        let txreceived = await supplyChain.receiveItem(upc)

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        truffleAssert.eventEmitted(txreceived, 'Received');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], retailerAddress, 'Error: incorrect ownership transfer')
              
    })

    // 2nd Test
    it("Testing smart contract function buyItem() that allows a consume to buy a drug", async() => {

        const supplyChain = await SupplyChain.deployed()
        // Mark an item as Harvested by calling function produceDrug()
        let txowned = await supplyChain.buyItem(upc, {from: consumerID, value: productPrice*2})
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        truffleAssert.eventEmitted(txowned, 'Owned');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], consumerID, 'Error: incorrect ownership transfer')
        assert.equal(resultBufferTwo[4], productPrice*6/5, 'Error: change in price')
              
    })



      
  