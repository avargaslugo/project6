// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const ProducreAddress = accounts[1]
    const ProducerName = "Big Pharma"
    const producerPlantInformation = "Yarray Valley"
    const plantLatitude = "-38.239770"
    const plantLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Pacetalmon Pain killer"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorAddress = accounts[2]
    const retailerAddress = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // First 4 tests are intended to test the creation of different roles.

    it("Test for adding producers", async() => {
        const supplyChain = await SupplyChain.deployed()

        let addproducertx = await supplyChain.addProducer(ProducreAddress)
        const isProducerTrue = await supplyChain.isProducer(ProducreAddress)
        const isProducerFalse = await supplyChain.isProducer(retailerAddress)
        
        truffleAssert.eventEmitted(addproducertx, 'ProducerAdded');
        assert.equal(isProducerTrue, true)
        assert.equal(isProducerFalse, false)
    })

    it("Test for adding distributors", async() => {
        const supplyChain = await SupplyChain.deployed()

        let adddistributortx = await supplyChain.addDistributor(distributorAddress)
        const isDistributorTrue = await supplyChain.isDistributor(distributorAddress)
        const isDistributorFalse = await supplyChain.isDistributor(ProducreAddress)
        
        truffleAssert.eventEmitted(adddistributortx, 'DistributorAdded');
        assert.equal(isDistributorTrue, true)
        assert.equal(isDistributorFalse, false)
    })

    it("Test for adding retailers", async() => {
        const supplyChain = await SupplyChain.deployed()

        let addretailertx = await supplyChain.addRetailer(retailerAddress)
        const isRetailerTrue = await supplyChain.isRetailer(retailerAddress)
        const isRetailerFalse = await supplyChain.isRetailer(ProducreAddress)
        
        truffleAssert.eventEmitted(addretailertx, 'RetailerAdded');
        assert.equal(isRetailerTrue, true)
        assert.equal(isRetailerFalse, false)
    })

    it("Test for adding consumers", async() => {
        const supplyChain = await SupplyChain.deployed()

        let addconsumertx = await supplyChain.addConsumer(consumerID)
        const isConsumerTrue = await supplyChain.isConsumer(consumerID)
        const isConsumerFalse = await supplyChain.isConsumer(ProducreAddress)
        
        truffleAssert.eventEmitted(addconsumertx, 'ConsumerAdded');
        assert.equal(isConsumerTrue, true)
        assert.equal(isConsumerFalse, false)
    })

    // We now test the functionality of the contract
    it("Testing smart contract function produceDrug() that allows a producer to produce a drug", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Produced by calling function produceDrug()
        let producedtx = await supplyChain.produceDrug(upc, ProducerName, producerPlantInformation, plantLatitude, plantLongitude, 
            productNotes, retailerAddress, distributorAddress, productPrice, {from: ProducreAddress})
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ProducreAddress, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], ProducreAddress, 'Error: Missing or Invalid producerID')
        assert.equal(resultBufferOne[4], ProducerName, 'Error: Missing or Invalid producerName')
        assert.equal(resultBufferOne[5], producerPlantInformation, 'Error: Missing or Invalid producerPlantInformation')
        assert.equal(resultBufferOne[6], plantLatitude, 'Error: Missing or Invalid producerPlandtLatitude')
        assert.equal(resultBufferOne[7], plantLongitude, 'Error: Missing or Invalid producerPlantLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], retailerAddress, 'Error: Invalid retailer')
        assert.equal(resultBufferTwo[7], distributorAddress, 'Error: Invalid distributor')
        assert.equal(resultBufferTwo[8], 0, 'Error: Invalid consumer')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        truffleAssert.eventEmitted(producedtx, 'Produced');

    })

    it("Testing smart contract function payFor() that a retailer purchase a drug and start the shipping process", async() => {
        
        const supplyChain = await SupplyChain.deployed()
        let initialProducerBalance = await web3.eth.getBalance(ProducreAddress);
        // retailer pays for the drug and marks it as paid for
        let tx2 = await supplyChain.payForDrug(upc, {from: retailerAddress, value: productPrice})

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        truffleAssert.eventEmitted(tx2, 'PaidFor');
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], ProducreAddress, 'Error: the producer should still be the owner at this stage')

        let actualBalance = await web3.eth.getBalance(ProducreAddress);
        // make sure that the balances are correctly updated
        assert.equal(actualBalance, parseInt(initialProducerBalance) + parseInt(productPrice))
              
    })

    it("Testing smart contract function shipItem() that allows a distributor to ship a drug", async() => {

        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Shipped by calling function produceDrug()
        let tx2 = await supplyChain.shipItem(upc,{from: distributorAddress})

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        truffleAssert.eventEmitted(tx2, 'Shipped');
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        // makes sure that the distributor is the new owner and responsible for  the drug.
        assert.equal(resultBufferOne[2], distributorAddress, 'Error: incorrect ownership transfer')
              
    })

    it("Testing smart contract function receiveItem() that allows a retailer to recive a drug", async() => {

        const supplyChain = await SupplyChain.deployed()
        // Mark an item as Received by calling function receiveItem() function
        let txreceived = await supplyChain.receiveItem(upc, {from: retailerAddress})

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        truffleAssert.eventEmitted(txreceived, 'Received');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        // makes sure that the retialer is now the new owner and reponsible for the drug
        assert.equal(resultBufferOne[2], retailerAddress, 'Error: incorrect ownership transfer')
        // makes sure the price of the drug is updated correctly
        assert.equal(resultBufferTwo[4], productPrice*6/5, 'Error: change price was not changed')
              
    })

    it("Testing smart contract function buyItem() that allows a consume to buy a drug", async() => {

        const supplyChain = await SupplyChain.deployed()
        // Mark an item as Owen by calling function buyDrug()
        let txowned = await supplyChain.buyDrug(upc, {from: consumerID, value: productPrice*2})
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        truffleAssert.eventEmitted(txowned, 'Owned');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        // makes sure the consumer is not defined as the owner. This defines the end of the supply chain
        assert.equal(resultBufferOne[2], consumerID, 'Error: incorrect ownership transfer')
        
              
    })
  

});

